#+STARTUP: content
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:t c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+property: header-args :tangle init.el
#+title: config.org
#+author: Thomas Schimper
#+email: schimper@hades
#+language: us
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.0.50 (Org mode 9.3)
#+html_head: <link rel="stylesheet" href="/tufte.css" type="text/css" />
#+options: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+options: html-scripts:nil html-style:nil html5-fancy:t tex:t
#+html_doctype: xhtml-strict
#+html_container: div
#+html_content_class: content
#+description:
#+keywords:
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_equation_reference_format: \eqref{%s}
#+html_head:
#+html_head_extra:
#+subtitle:
#+infojs_opt:
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 30.0.50 (<a href="https://orgmode.org">Org</a> mode 9.6.5)
#+latex_header:

* Introduction
  This is my personal Emacs Config written in Org-Mode. You can use this
  configuration by tangeling this file and evaluating all the source
  blocks with =org-bable-tangle= and =eval-buffer= or by calling
  =org-load-file=. With every section defined I try to explain what
  every line of Code is doing.
* Personal Information
  Setting my personal Information
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Thomas Schimper")
    (setq user-email-address "thomasschimper94@gmail.com")
  #+END_SRC

* Changes to default Emacs
   Changing the default emacs behaviour
** Customizing Variables
   #+BEGIN_SRC emacs-lisp
     (setopt display-time-default-load-average nil
             auto-revert-avoid-polling t
             auto-revert-interval 5
             auto-revert-check-vc-info t
             switch-to-buffer-obey-display-actions t
             indicate-buffer-boundaries 'left
             display-line-numbers-width 3
             tab-bar-show 1
             display-time-format "%a %F %H:%M"
             display-time-interval 60)
     (setq-default ispell-program-name "aspell"
                   indent-tabs-mode nil
                   tab-width 4
                   fill-column 80)
     (setq auto-save-file-name-transforms '((".*" "~/.emacs_autosave/" t))
           backup-directory-alist '(("." . "~/.emacs_backups/"))
           backup-by-copying t
           ;; Require new Line
           require-final-newline t
           show-trailing-whitespace t
           kill-whole-line t
           ;; native comp-settings
           comp-async-report-warnings-errors nil
           native-comp-async-report-warnings-errors nil
           native-comp-deferred-compilation-deny-list '("highlight-indent-guides")
           ;; startup
           vc-follow-symlinks t
           inhibit-startup-message t
           initial-scratch-message ""
           ispell-list-command "--list"
           ;; dired
           dired-listing-switches "-l -a --group-directories-first --human-readable"
           dired-kill-when-opening-new-dired-buffer t
           ;; ignore case
           case-fold-search t
           ;; Always display line and column numbers
           line-number-mode t
           column-number-mode t
           ;; ignore bell
           ring-bell-function 'ignore
           fci-rule-width 2
           sentence-end-double-space nil)
     (global-auto-revert-mode)

   #+END_SRC

*** Behaviour & Look
#+begin_src emacs-lisp
  ;; moving backups to different folder
  (make-directory "~/.emacs_backups/" t)
  (make-directory "~/.emacs_autosave/" t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (delete-selection-mode 1)
  (setq echo-keystrokes 0.01
        mouse-yank-at-point t)
  (auto-fill-mode 1)
  (scroll-bar-mode -1)
  (set-default 'cursor-type 'box)
  (blink-cursor-mode -1)
  (recentf-mode 1)
  (save-place-mode +1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (show-paren-mode 1)
  (defadvice switch-to-buffer (after activate-input-method activate)
    (activate-input-method "german-postfix"))

  ;; kbds
  (global-set-key (kbd "C-1") 'kill-this-buffer)
  (global-set-key [C-tab] 'other-window)
  (add-to-list 'default-frame-alist '(font . "Iosevka-12"));; for daemon
  (defun my-pretty-symbols ()
    (setq prettify-symbols-alist
          '(
            ("lambda" . 955) ; λ
            ("fn" . 955)
            ("->" . 8594)    ; →
            ("=>" . 8658)    ; ⇒
            ("map" . 8614)   ; ↦
            ("not" . 172)
            ("and" . 8743)
            ("or" . 8744)
            )))
  (add-hook 'clojure-mode-hook 'my-pretty-symbols)
  (add-hook 'clojure-mode-hook 'prettify-symbols-mode)
  (add-hook 'text-mode-hook #'auto-fill-mode)
  (add-hook 'text-mode-hook #'display-fill-column-indicator-mode)
  (add-hook 'prog-mode-hook #'auto-fill-mode)
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
  (add-hook 'prog-mode-hook
            #'display-line-numbers-mode)
  ;; Remove text in active region if inserting text
  (delete-selection-mode 1)
#+end_src

* Package-Management
To ensure every package I need is installed on a new system we use
[[github.com/progfolio/elpaca][elpaca]] to make package management as easy as possible.
** elpaca
*** Install

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                   ,@(when-let ((depth (plist-get order :depth)))
                                                       (list (format "--depth=%d" depth) "--no-single-branch"))
                                                   ,(plist-get order :repo) ,repo))))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

*** Config

#+begin_src emacs-lisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq use-package-always-ensure t)
    (setq use-package-verbose nil))
  (elpaca-wait)
#+end_src
* Global-Modes
** Themes
   Enabling the Material color theme.
   #+BEGIN_SRC emacs-lisp
     (use-package modus-themes
       :config
       (if (daemonp)
           (add-hook 'after-make-frame-functions
                     (lambda (frame)
                       (select-frame frame)
                       (load-theme 'modus-operandi-tinted :no-confirm)))
         (load-theme 'modus-operandi-tinted :no-confirm)))
   #+END_SRC
** Custom Modeline
   Considering to remove modeline.
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1)
       :config
       (setq doom-modeline-height 40
             doom-modeline-enable-word-count t))
   #+END_SRC
** Dashboard
#+begin_src emacs-lisp
    (use-package dashboard
      :config
      (dashboard-setup-startup-hook)
      (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (agenda . 5))
            dashboard-icon-type 'kind-icon
            dashboard-set-heading-icons t
            dashboard-set-file-icons t
            dashboard-set-navigator t
            dashboard-center-content t
            dashboard-startup-banner "~/.emacs.d/logo/gnuc.webp"
            dashboard-banner-logo-title "I want to be a stronger, kinder person"))
#+end_src
* Plugins
** MEOW
#+begin_src emacs-lisp
  (use-package meow
    :ensure t
    :init
    (defun meow-setup ()
      (setq meow-cheatsheet-physical-layout meow-cheatsheet-physical-layout-iso)
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwertz)

      (meow-thing-register 'angle
                           '(pair (";") (":"))
                           '(pair (";") (":")))

      (setq meow-char-thing-table
            '((?f . round)
              (?d . square)
              (?s . curly)
              (?a . angle)
              (?r . string)
              (?v . paragraph)
              (?c . line)
              (?x . buffer)))

      (meow-leader-define-key
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("-" . meow-keypad-describe-key)
       '("_" . meow-cheatsheet))

      (meow-normal-define-key
       ;; expansion
       '("0" . meow-expand-0)
       '("1" . meow-expand-1)
       '("2" . meow-expand-2)
       '("3" . meow-expand-3)
       '("4" . meow-expand-4)
       '("5" . meow-expand-5)
       '("6" . meow-expand-6)
       '("7" . meow-expand-7)
       '("8" . meow-expand-8)
       '("9" . meow-expand-9)
       '("ä" . meow-reverse)

       ;; movement
       '("i" . meow-prev)
       '("k" . meow-next)
       '("j" . meow-left)
       '("l" . meow-right)

       '("z" . meow-search)
       '("-" . meow-visit)

       ;; expansion
       '("I" . meow-prev-expand)
       '("K" . meow-next-expand)
       '("J" . meow-left-expand)
       '("L" . meow-right-expand)

       '("u" . meow-back-word)
       '("U" . meow-back-symbol)
       '("o" . meow-next-word)
       '("O" . meow-next-symbol)

       '("a" . meow-mark-word)
       '("A" . meow-mark-symbol)
       '("s" . meow-line)
       '("S" . meow-goto-line)
       '("w" . meow-block)
       '("q" . meow-join)
       '("g" . meow-grab)
       '("G" . meow-pop-grab)
       '("m" . meow-swap-grab)
       '("M" . meow-sync-grab)
       '("p" . meow-cancel-selection)
       '("P" . meow-pop-selection)

       '("x" . meow-till)
       '("y" . meow-find)

       '("," . meow-beginning-of-thing)
       '("." . meow-end-of-thing)
       '(";" . meow-inner-of-thing)
       '(":" . meow-bounds-of-thing)

       ;; editing
       '("d" . meow-kill)
       '("f" . meow-change)
       '("t" . meow-delete)
       '("c" . meow-save)
       '("v" . meow-yank)
       '("V" . meow-yank-pop)

       '("e" . meow-insert)
       '("E" . meow-open-above)
       '("r" . meow-append)
       '("R" . meow-open-below)

       '("h" . undo-only)
       '("H" . undo-redo)

       '("b" . open-line)
       '("B" . split-line)

       '("ü" . indent-rigidly-left-to-tab-stop)
       '("+" . indent-rigidly-right-to-tab-stop)

       ;; ignore escape
       '("<escape>" . ignore)))
    (require 'meow)
    (meow-setup))
#+end_src
*** Aggressive-Indent
    #+BEGIN_SRC emacs-lisp
      (use-package aggressive-indent
        :hook ((c-mode . aggressive-indent-mode)
               (c++-mode . aggressive-indent-mode)
               (java-mode . aggressive-indent-mode))
        :config
        (add-to-list 'aggressive-indent-excluded-modes 'python-mode))
    #+END_SRC
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (savehist-mode +1)

  ;; A few more useful configurations...
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  (use-package vertico-directory
    :after vertico
    :load-path "~/.emacs.d/elpaca/builds/vertico/extensions"
    :ensure nil
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("C-d" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word)
                ("C-s" . vertico-next)
                ("C-r" . vertico-previous)))
  (use-package vertico-reverse
    :after vertico
    :ensure nil
    :load-path "~/.emacs.d/elpaca/builds/vertico/extensions"
    :hook (vertico-mode . vertico-reverse-mode))
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src
*** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src

*** Consult

#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
  )
#+end_src

*** Avy
    Activate Avy
    #+BEGIN_SRC emacs-lisp
   (use-package avy
     :bind (("C-:" . avy-goto-char)))
    #+END_SRC

*** Which-Key
    #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
    #+END_SRC
*** vterm
    #+begin_src emacs-lisp
  (use-package vterm
    :init
    (setq vterm-always-compile-module t)
    :hook
    (vterm-mode . (lambda () (setq-local global-hl-line-mode nil))))
    #+end_src
#+begin_src emacs-lisp
  (use-package multi-vterm
    :ensure t
    :after vterm
    :bind ("C-`" . multi-vterm-dedicated-toggle)
    :config
    (setq multi-vterm-dedicated-window-height-percent 30))
#+end_src
*** Ibuffer
    #+begin_src emacs-lisp
      (setq ibuffer-saved-filter-groups
            (quote (("default"
                     ("dired" (mode . dired-mode))
                     ("perl" (mode . cperl-mode))
                     ("erc" (mode . erc-mode))
                     ("planner" (or
                                 (name . "^\\*Calendar\\*$")
                                 (name . "^diary$")
                                 (mode . muse-mode)))
                     ("emacs" (or
                               (name . "^\\*scratch\\*$")
                               (name . "^\\*Messages\\*$")))
                     ("gnus" (or
                              (mode . message-mode)
                              (mode . bbdb-mode)
                              (mode . mail-mode)
                              (mode . gnus-group-mode)
                              (mode . gnus-summary-mode)
                              (mode . gnus-article-mode)
                              (name . "^\\.bbdb$")
                              (name . "^\\.newsrc-dribble")))))))
    #+end_src

*** Calendar
    #+begin_src emacs-lisp
      (setq calendar-week-start-day 1)
      (setq calendar-week-start-day 1
            calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                                     "Donnerstag" "Freitag" "Samstag"]
            calendar-month-name-array ["Januar" "Februar" "März" "April" "Mai"
                                       "Juni" "Juli" "August" "September"
                                       "Oktober" "November" "Dezember"])
    #+end_src
*** Backup Directory
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )
#+end_src
*** Expand-Region
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region)
    :after (org))
#+end_src
*** Swiper
#+begin_src emacs-lisp
  (use-package swiper
    :bind (("C-s" . swiper-isearch)))
#+end_src
*** COMMENT Keycast
#+begin_src emacs-lisp
  (use-package keycast
    :after doom-modeline
    :config
    (setq keycast-mode-line-insert-after '(:eval (doom-modeline-format--main)))
    (add-to-list 'global-mode-string '("" keycast-mode-line))
    (keycast-mode-line-mode))
#+end_src
*** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0
            treemacs-file-name-transformer           #'identity
            treemacs-project-follow-mode             t
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))
#+end_src

#+RESULTS:*
*** Guru-Mode
#+begin_src emacs-lisp
  (use-package guru-mode
    :init
    (guru-global-mode +1))
#+end_src
*** Golden Ratio
#+begin_src emacs-lisp
  (use-package golden-ratio
    :init (golden-ratio-mode))
#+end_src

*** Spacious padding
#+begin_src emacs-lisp
  (use-package spacious-padding
    :init (spacious-padding-mode))
#+end_src
** Programming & Version-Control



*** Highlight Indent Mode
#+begin_src emacs-lisp
  (use-package highlight-indentation
    :ensure t
    :hook ((prog-mode . highlight-indentation-mode)
           (prog-mode . highlight-indentation-current-column-mode)))
#+end_src
*** Language Server Protocol
**** Eglot
     #+begin_src emacs-lisp
       (use-package eldoc)
       (use-package jsonrpc
         :after eldoc)
       (use-package eglot
         :after jsonrpc
         :custom
         (eglot-send-changes-idle-time 0.1)
         (eglot-extend-to-xref t)
         :config
         (fset #'jsonrpc--log-event #'ignore) ;;speedup
         (add-to-list 'eglot-server-programs
                      '(python-mode . ("pyright-langserver" "--stdio")))
         (add-to-list 'eglot-server-programs
                      '(c-mode . ("clangd")))
         (define-key eglot-mode-map (kbd "C-c r")
                     'eglot-rename)
         (define-key eglot-mode-map (kbd "C-c o")
                     'eglot-code-action-organize-imports)
         (define-key eglot-mode-map (kbd "C-c h")
                     'eldoc)
         (define-key eglot-mode-map (kbd "C-c f")
                     'eglot-format-buffer)
         (define-key eglot-mode-map (kbd "<f6>")
                     'xref-find-definitions)
         (setq eglot-autoshutdown t
               eglot-autoreconnect t
               completion-category-overrides '((eglot (styles orderless))))
         (setq eglot-events-buffer-size 0)
         (setq-default eglot-workspace-configuration
                       '(:pyright
                         (:plugins
                          (:jedi_completion
                           (:fuzzy t))
                          :pydocstyle (:enabled :json-false)
                          :pycodestyle (:enabled :json-false)
                          :mccabe (:enabled :json-false)
                          :pyflakes (:enabled :json-false)
                          :flake8 (:enabled :json-false)
                          :yapf (:enabled :json-false)
                          :black (:enabled :json-false)
                          :rope (:enabled t)
                          :isort (:enabled t)
                          :ruff (:enabled t))))
       :hook
       ((c-mode python-mode typescript-mode) . eglot-ensure))
     #+end_src
**** dape
#+begin_src emacs-lisp
  (use-package dape
    :config
    (add-to-list 'dape-configs
               `(debugpy
                 modes (python-ts-mode python-mode)
                 command "python3"
                 command-args ("-m" "debugpy.adapter")
                 :type "executable"
                 :request "launch"
                 :cwd dape-cwd-fn)))
#+end_src
*** Projectmanagement
    #+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-project-search-path '("~/Documents/Studium" "~/Org/website")))
    #+END_SRC
*** Autocompletion & Templating
**** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    ;; want to perform completion
    (tab-always-indent 'complete)
    (completion-cycle-threshold nil)      ; Always show candidates in menu
    (corfu-auto t)
    (corfu-auto-prefix 1)
    (corfu-auto-delay 0.25)
    (corfu-count 14)
    (corfu-scroll-margin 4)
    (corfu-cycle t)
    :config
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)
    (global-corfu-mode))
#+end_src
***** Corfu Popupinfo
#+begin_src emacs-lisp
  (use-package corfu-popupinfo
    :ensure nil
    :after corfu
    :load-path "~/.emacs.d/elpaca/builds/corfu/extensions"
    :custom (corfu-popupinfo-delay '(0.5 . 0.5))
    :hook (corfu-mode . corfu-popupinfo-mode))
#+end_src
***** Cape
#+begin_src emacs-lisp
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-elisp-symbol)
           ("C-c p e" . cape-elisp-block)
           ("C-c p a" . cape-abbrev)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p :" . cape-emoji)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )
#+end_src
**** Kind-Icons
#+begin_src emacs-lisp
  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
**** Yasnippets
     Yasnippet provides snippet support for emacs.
     #+BEGIN_SRC emacs-lisp
       (use-package yasnippet
         :after org
         :hook
         (prog-mode . yas-minor-mode)
         (org-mode . yas-minor-mode))

       (use-package yasnippet-snippets
         :after (yasnippet))
     #+END_SRC
***** Custom Snippets
****** setup org-mode
#+begin_src text :tangle ~/.emacs.d/snippets/org-mode/main.yasnippet :mkdirp yes
  # -*- mode: snippet -*-
  # name: st
  # contributor: Thomas Schimper <thomasschimper94@gmail.com>
  # key: st
  # --
  ,#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
  ,#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
  ,#+options: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
  ,#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
  ,#+title: $1
  ,#+subtitle: $2
  ,#+author: `(user-full-name)`
  ,#+email: `(user-email-address)`
  ,#+language: $3
  ,#+select_tags: export
  ,#+exclude_tags: noexport
  ,#+creator: Emacs
  ,#+cite_export:
  ,#+latex_class: $4
  ,#+latex_class_options: $5
  ,#+latex_header: \usepackage[ngerman,english]{babel}$6
  ,#+latex_header_extra:
  ,#+description: $7
  ,#+keywords: $8
  ,#+latex_engraved_theme:
  ,#+latex_compiler: pdflatex
  ,#+date: \today
  $0

#+end_src
****** report
#+begin_src text :tangle ~/.emacs.d/snippets/org-mode/report.yasnippet :mkdirp yes
  # -*- mode: snippet -*-
  # name: report
  # uuid:
  # key: report
  # condition: t
  # --
  ,#+title: ${1:Titre}
  ,#+author: ${2:Auteur}
  ,#+options: toc:nil
  ,#+where: ${3:Ou}
  ,#+when: ${4:Date}
  ,#+present: ${5:Sophie Fonsec}
  ,#+initiator: ${6:Matthias DAVID}
  ,#+project: ${7:Secret project}
  ,#+duration: ${8:2H}
  ,#+logo: logo.png
#+end_src

**** FlyCheck & FlySpell
     Configure Flycheck
     #+BEGIN_SRC emacs-lisp
       (use-package flycheck
         :config
         (setq flymake-show-diagnostics-at-end-of-line 'short
               ispell-program-name (executable-find "hunspell")
               ispell-dictionary "de_DE"
               flycheck-display-errors-function
               #'flycheck-display-error-messages-unless-error-list))
     #+END_SRC

**** Auto-Insert-Mode
     #+begin_src emacs-lisp
     (auto-insert-mode 1)
     #+end_src
***** Gentoo
****** Ebuilds
       #+BEGIN_SRC emacs-lisp
    (eval-after-load 'autoinsert
      '(define-auto-insert
         '("\\.\\(ebuilds?\\|ebuild\\)\\'" . "Ebuild skeleton")
         '("Template for Gentoo Ebuilds"
           "# Copyright 1999-2019 Gentoo Authors"\n
           "# Distributed under the terms of the GNU General Public License v2"\n
           ""\n
           "EAPI=7"\n
           ""\n
           "DESCRIPTION=\"\""\n
           "HOMEPAGE=\"\""\n
           "SRC_URI=\"\""\n
           ""\n
           "LICENSE=\"\""\n
           "SLOT=\"0\""\n
           "KEYWORDS=\"~amd64 ~x86\""\n
           "IUSE=\"\""\n
           ""\n
           "DEPEND=\"\""\n
           "RDEPEND=\"${DEPEND}\""\n
           "BDEPEND=\"\""\n
           )))
       #+END_SRC

***** Bash
       #+BEGIN_SRC emacs-lisp
    (eval-after-load 'autoinsert
      '(define-auto-insert
         '("\\.\\(SH?\\|sh\\)\\'" . "Bash Script skeleton")
         '("Template for Bash Scripts"
           "#!/usr/bin/env bash"\n
           "# --------------------------------------------------------"\n
           "# [Thomas Schimper] Title"\n
           "#                   Description"\n
           "# --------------------------------------------------------"\n
           "set -euf -o pipefail"\n
           ""\n
           "while getopts \":w:c:\" opt"\n
           "do"\n
           "    case $opt in"\n
           "        w) echo \"Option w = ${OPTARG}\";;"\n
           "        c) echo 'Option c';;"\n
           "    esac"\n
           "done"\n
           )))
       #+END_SRC
*** Clojure & Lisp
**** COMMENT Cider
     Cider a Plugin for writing Clojure Code.
     #+BEGIN_SRC emacs-lisp
       (use-package cider
         :defer t
         :hook clojure-mode)
     #+END_SRC

**** Parens
     Paredit is used to make parenthesis management more easy.
     #+BEGIN_SRC emacs-lisp
       (use-package smartparens
         :diminish smartparens-mode
         :hook (prog-mode . smartparens-mode))
       (use-package paredit
         :init
         (defun paredit-nonlisp ()
         "Turn on paredit mode for non-lisps."
         (interactive)
         (set (make-local-variable 'paredit-space-for-delimiter-predicates)
              '((lambda (endp delimiter) nil)))
         (paredit-mode 1)))
     #+END_SRC

**** Rainbow Delimiters
     It is useful to get visual feedback which bracket matches another one
     #+BEGIN_SRC emacs-lisp
       (use-package rainbow-delimiters
         :hook
         (prog-mode . rainbow-delimiters-mode))
     #+END_SRC
*** COMMENT Python
#+begin_src emacs-lisp
      (use-package python
        :config
        (setq python-indent-guess-indent-offset-verbose nil)
        (setq-local electric-indent-mode nil))
#+end_src
**** Documentation
#+begin_src emacs-lisp
  (use-package sphinx-doc
    :custom
    (sphinx-doc-include-types t))
#+end_src
*** Magit
    #+BEGIN_SRC emacs-lisp
      (use-package transient)
      (use-package magit
        :after transient
        :bind (("C-c m" . magit-status)))
      (use-package forge
        :after magit
        :config
        (add-to-list 'forge-alist '("gitlab.rlp.net" "gitlab.rlp.net/api/v4" "gitlab.rlp.net" forge-gitlab-repository)))
#+end_src
**** COMMENT Magit-TODOs
#+begin_src emacs-lisp
  (use-package magit-todos
    :after magit
    :config (magit-todos-mode 1))
#+end_src

*** Web-Development
**** SASS
     #+begin_src emacs-lisp
       (use-package scss-mode
         :mode "\\.scss\\'"
         :config
         (setq scss-compile-at-save t))
     #+end_src
**** Skewer-Mode
#+begin_src emacs-lisp
  (use-package skewer-mode
    :hook
    (js2-mode . skewer-mode)
    (css-mode . skewer-mode)
    (html-mode . skewer-mode))
#+end_src
**** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode)
#+end_src
*** Ansible
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
  (use-package ansible
    :config
    (add-hook 'yaml-mode-hook #'(lambda () (ansible 1))))

#+END_SRC
*** Chat-GPT
#+begin_src emacs-lisp
  (use-package chatgpt-shell
    :ensure t
    :custom
    ((chatgpt-shell-openai-key
      (lambda ()
        (auth-source-pass-get 'secret "openai-key")))))
#+end_src
** Writing & Management
*** CDLatex
    #+BEGIN_SRC emacs-lisp
      (use-package cdlatex
        :after org
        :init
        (setq
         cdlatex-paired-parens "$[{"
         cdlatex-math-symbol-alist '(
                                    (?% ("\\widehat{?}" "\\hat{?}"))
                                    (?' ("^{\\prime}" "\\prime"))
                                    (?* ("\\times" "\\otimes" "\\star"))
                                    (?+ ("+" "\\oplus"))
                                    (?- ("\\vdash" "\\setminus" "\\triangle"))
                                    (?. ("\\sq" "\\circ" "\\cdot"))
                                    (?0 ("\\emptyset" "\\circ"))
                                    (?\; ("\\col"))
                                    (?< ("\\leftarrow" "\\leftharpoonup" "\\xleftarrow"))
                                    (?> ("\\rightarrow" "\\rightharpoonup" "\\xrightarrow"))
                                    (?B ("\\bullet"))
                                    (?C ("\\widecheck{?}" "\\check{?}"))
                                    (?F ("\\Phi" "\\Varphi"))
                                    (?q ("?_{1},?_{2},\\dots,?_{n}"))
                                    (?M ("\\begin{bsmallmatrix}?\\end{bsmallmatrix}"))
                                    (?P ("\\Prod{?}" "\\Pi" "\\partial"))
                                    (?S ("\\Sigma_{?}" "\\Sum" "\\arcsin"))
                                    (?\"("^{\\prime\\prime}" "\\prime\\prime"))
                                    (?a ("\\alpha" "\\cap" "\\sqcap"))
                                    (?c ("\\cat{?}" "\\catn{?}"))
                                    (?e ("\\varepsilon" "\\epsilon" "\\exp{?}"))
                                    (?i ("\\iota" "\\in"))
                                    (?j ("{\\id^{h}}_{?}" "{\\id^{v}}_{?}"))
                                    (?r ("\\rho" "\\varrho" "\\restrict{?}"))
                                    (?u ("\\upsilon" "\\cup" "\\sqcup"))
                                    (?{ ("\\subseteq" "\\subsetneq"))
                                    (?} ("\\supseteq" "\\supsetneq"))
                                    (?p ("\\prec")))
        cdlatex-math-modify-alist '(
                                    (46 "\\dot" nil t t nil)
                                    (58 "\\ddot" nil t t nil)
                                    (126 "\\tilde" nil t t nil)
                                    (78 "\\widetilde" nil t t nil)
                                    (94 "\\hat" nil t t nil)
                                    (72 "\\widehat" nil t t nil)
                                    (45 "\\bar" nil t t nil)
                                    (84 "\\overline" nil t nqil nil)
                                    (95 "\\underline" nil t nil nil)
                                    (123 "\\overbrace" nil t nil nil)
                                    (125 "\\underbrace" nil t nil nil)
                                    (62 "\\vec" nil t t nil)
                                    (47 "\\grave" nil t t nil)
                                    (92 "\\acute" nil t t nil)
                                    (118 "\\check" nil t t nil)
                                    (117 "\\breve" nil t t nil)
                                    (109 "\\mbox" nil t nil nil)
                                    (99 "\\mathcal" nil t nil nil)
                                    (114 "\\mathrm" "\\textrm" t nil nil)
                                    (105 "\\mathit" "\\textit" t nil nil)
                                    (108 nil "\\textsl" t nil nil)
                                    (98 "\\mathbb" "\\textbb" t nil nil)
                                    (101 "\\mathem" "\\emph" t nil nil)
                                    (121 "\\mathtt" "\\texttt" t nil nil)
                                    (102 "\\mathsf" "\\textsf" t nil nil)
                                    (48 "\\textstyle" nil nil nil nil)
                                    (49 "\\displaystyle" nil nil nil nil)
                                    (50 "\\scriptstyle" nil nil nil nil)
                                    (51 "\\scriptscriptstyle" nil nil nil nil))))
    #+END_SRC
*** SMOG
#+begin_src emacs-lisp
  (use-package smog
   :config (setq smog-command "style -L en -l 23"))
#+end_src
*** Proselint
#+begin_src emacs-lisp
  (use-package flymake-proselint
    :hook (text-mode . (lambda ()
                         (flymake-mode)
                         (flymake-proselint-setup))))
#+end_src

*** MermaidJS Diagrams
#+begin_src emacs-lisp
      (use-package mermaid-mode
        :config
        (setq mermaid-flags "-f")
        (setq mermaid-mmdc-location "/home/thomas/.local/bin/mmdc"))
#+end_src
*** Org
**** Main Config
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :bind (([f3] . (lambda () (interactive) (org-latex-export-to-pdf t))))
    :config
    (define-key global-map "\C-cc" 'org-capture)
    (define-key global-map "\C-cl" 'org-store-link)
    (define-key global-map "\C-ca" (lambda
                                     ()
                                     (interactive)
                                     (org-agenda-list 1)))
    (add-hook 'emacs-startup-hook
              (lambda ()
                (org-agenda-list)))
    (setq org-default-notes-file (concat org-directory "/notes.org")
          org-highlight-latex-and-related '(native script)
          org-use-speed-commands t
          org-export-in-background nil
          tex-fontify-script nil
          org-capture-templates '(("j"
                                   "Journal Entry"
                                   entry
                                   (file+olp+datetree
                                    "~/Org/journal.org")
                                   "* %?"
                                   :empty-lines 1)
                                  ("t"
                                   "Tagesplanung"
                                   entry
                                   (file+olp+datetree "~/Org/gtd.org" "Aufgaben")
                                   "* TODO %?\n SCHEDULED: %(org-insert-time-stamp
                                       (org-read-date nil t)) \n  %i\n"))
          org-format-latex-options (plist-put org-format-latex-options :scale 1.7)
          org-ellipsis "..."
          org-log-done 'time
          org-agenda-start-with-log-mode t
          org-agenda-files '("~/Org")
          org-confirm-babel-evaluate nil
          org-clock-out-remove-zero-time-clocks t
          org-clock-clocked-in-display 'both
          org-ditaa-jar-path "/usr/share/ditaa/lib/ditaa.jar"
          org-todo-keywords
          '((sequence "TODO(t)" "HOLD(h)" "ACTIVE(a)" "|" "DONE(d)"))
          org-agenda-custom-commands
          '(("d" "Sorted TODO list"
             ((agenda "" ((org-agenda-overriding-header "Today's Schedule")))
              (tags-todo "+TODO=\"DOING\""
                         ((org-agenda-overriding-header "ACTIVE")
                          (org-agenda-sorting-strategy '(priority-up))))
              (tags-todo "+TODO=\"TODO\""
                         ((org-agenda-overriding-header "TODOs")
                          (org-agenda-sorting-strategy '(priority-up))))
              (tags-todo "+TODO=\"DOING\""
                         ((org-agenda-overriding-header "HOLD")
                          (org-agenda-sorting-strategy '(priority-up))))
              (tags-todo "+TODO=\"DONE\""
                         ((org-agenda-overriding-header "COMPLETED")
                          (org-agenda-sorting-strategy '(priority-down)))))))))
    (setf org-blank-before-new-entry
          '((heading . nil) (plain-list-item . qnil)))
    ;; Custom NoStarch
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((org . t)
       (ditaa . t)
       (latex . t)
       (dot . t)
       (emacs-lisp . t)
       (gnuplot . t)
       (screen . nil)
       (shell . t)
       (sql . nil)
       (sqlite . t)))
    (setq
     org-latex-logfiles-extensions (quote ("lof"
                                           "lot"
                                           "tex~"
                                           "aux"
                                           "idx"
                                           "log"
                                           "out"
                                           "toc"
                                           "nav"
                                           "snm"
                                           "vrb"
                                           "dvi"
                                           "fdb_latexmk"
                                           "blg"
                                           "brf"
                                           "fls"
                                           "entoc"
                                           "ps"
                                           "spl"
                                           "bbl")))
  (require 'org-tempo)
  ;; make available "org-bullet-face" such that I can control the font size individually
  (tempo-define-template "marginfigure" ; Marginfigure for Tufte-Handout
                         '("#caption:" p " label:" n
                           "#+begin_marginfigure" n
                           "#+attr_latex: :scale 1" n
                           r n
                           "#+end_marginfigure")
                         "<mf"
                         "Inserts a Marginfigure"
                         'org-tempo-tags)
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  #+end_src
 
**** Org-Ref
  #+begin_src emacs-lisp
    (use-package org-ref
      :config
      (add-hook 'org-mode-hook
                (lambda ()
                  (local-set-key (kbd "M-]") 'org-ref-insert-link)))
      (setq bibtex-completion-bibliography '("~/Documents/studium/MA/pyspark_rdf_fca/text/bibliography.bib")))
    ;;(use-package ox-tufte)

    #+end_src
**** Org-Modern
#+begin_src emacs-lisp
  (use-package org-modern
    :config
    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers nil
     org-pretty-entities nil
     org-modern-star nil
     org-modern-hide-stars 'leading
     org-ellipsis " …"
     org-modern-keyword t
     org-modern-block-fringe 10
     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────")

    (global-org-modern-mode))
#+end_src

#+RESULTS:

**** Org-Caldav

#+begin_src emacs-lisp
  (use-package org-caldav
    :config
    (setq org-caldav-url "https://cal.schimper.me"
          org-icalendar-timezone "Europe/Berlin"
          org-caldav-calendars '((:calendar-id
                                  "thomas/1202cec9-bb55-3821-feea-3196d5dfe882/"
                                  :inbox "~/Org/personal-inbox.org"
                                  :files ("~/Org/dailies.org")))
          org-icalendar-alarm-time 1
          org-icalendar-include-todo t
          org-icalendar-scheduled-summary-prefix ""
          org-icalendar-use-deadline '(event-if-todo event-if-not-today todo-due)
          org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo)))
#+end_src

**** Org-Noter
#+begin_src emacs-lisp
  (use-package org-noter
    :bind ([f6] . org-noter))
#+end_src
**** Org-Pomodoro
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :bind ([f7] . org-pomodoro)
    :custom
    (org-pomodoro-length 50)
    (org-pomodoro-start-sound-p t)
    (org-pomodoro-ticking-sound-p nil)
    (org-pomodoro-ticking-sound-states '(:pomodoro))
    (org-pomodoro-ticking-frequency 1)
    (org-pomodoro-keep-killed-pomodoro-time t)
    (org-pomodoro-start-sound "~/.emacs.d/bell.wav")
    (org-pomodoro-finished-sound "~/.emacs.d/bell.wav")
    (org-pomodoro-short-break-length 10)
    :config
    (setq alert-default-style 'libnotify)
    (add-hook 'org-clock-out-hook (lambda () (org-save-all-org-buffers))))
#+end_src
*** PDF-Tools
    Configure PDF-Tools
    #+BEGIN_SRC emacs-lisp
      (use-package pdf-tools
           :config
           (pdf-tools-install :no-query)
           (add-hook 'pdf-view-mode-hook (lambda ()
                                           (progn
                                             (pdf-view-midnight-minor-mode)
                                             (pdf-view-fit-page-to-window)))))
    #+END_SRC
*** LaTeX
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-latex-packages-alist '("" "minted"))
      (add-to-list 'org-latex-packages-alist '("dvipsnames" "xcolor"))
      (add-to-list 'org-latex-packages-alist '("" "booktabs"))
      (setq org-latex-listings 'minted
            org-latex-minted-options '(("fontsize" "\\normalsize")("frame" "lines")
                                       ("bgcolor=white"))
            org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
      (require 'ox-latex)
      (add-to-list 'org-latex-classes
                   '("cnostarch"
                     "\\documentclass{cnostarch}"
                     ("\\part{%s}" . "\\part*{%s}")
                     ("\\chapter{%s}" . "\\chapter*{%s}")
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
      (add-to-list 'org-latex-classes
                   '("tuftebook"
                     "\\documentclass{tufte-book}\n
                                 \\usepackage{xcolor}
                                 \\usepackage{amssymb}
                                 \\usepackage{gensymb}
                                 \\usepackage{nicefrac}
                                 \\usepackage{units}
                                 \\definecolor{bg}{RGB}{22,43,58}"
                     ("\\part{%s}" . "\\part*{%s}")
                     ("\\chapter{%s}" . "\\chapter*{%s}")
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

      (add-to-list 'org-latex-classes
                   '("tuftehandout"
                     "\\documentclass[nofonts,justified]{tufte-handout}\n"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")))
      (add-to-list 'org-latex-classes
                   '("memoir"
                     "\\documentclass{memoir}\n
                      \\usepackage[top=1in,bottom=1in]{geometry}
                      \\usepackage[ngerman]{babel}
                      \\usepackage{blindtext}
                      \\usepackage{graphicx}
                      \\usepackage[lf]{Baskervaldx}
                      \\let\\Bbbk\\relax
                      \\usepackage[cal=boondoxo]{mathalfa}
                      \\chapterstyle{veelo}
                      \\usepackage[dvipsnames]{xcolor}
                      \\usepackage[defaultlines=2,all]{nowidow}
                      \\renewcommand*{\\chapnamefont}{\\scshape\\LARGE\\flushright}
                      \\renewcommand*{\\chaptitlefont}{\\LARGE\\scshape}
                      \\renewcommand\\thechapter{\\Roman{chapter}}
                      \\renewcommand*{\\chapnumfont}{\\Large\\scshape}
                      \\renewcommand*{\\printchapternum}{%
                      \\makebox[2pt][l]{\\hspace{.15em}%
                      \\resizebox{!}{0.7\\beforechapskip}{\\chapnumfont \\thechapter}%
                      \\hspace{.2em}%
                      \\rule{5\\beforechapskip}{1.3\\beforechapskip}%
                      }}%
                   \\usepackage[babel=true,protrusion=true,expansion=true,spacing=true,tracking=smallcaps,kerning=true]{microtype}
                   \\usepackage{fancyhdr}
                   \\usepackage{lettrine}
                   \\usepackage{GoudyIn}
                   \\renewcommand{\\LettrineFontHook}{\\GoudyInfamily{}}
                   \\def\\drop #1#2 {% note the space before {
                     \\lettrine[lines=4]{\\color{Maroon}{#1}}{#2} % a trailing space
                   }
                   \\usepackage[
                       babel=true,
                       protrusion=true,
                       expansion=true,
                       spacing=true,
                       tracking=smallcaps,
                       kerning=true
                   ]{microtype}
                   \\fancyhf{}
                   \\renewcommand{\\headrulewidth}{0pt}
                   \\fancyhead[EC]{\\rightmark}
                   \\fancyhead[OC]{\\leftmark}
                   \\fancyfoot[C]{\\thepage}
                   \\newcommand{\\shorttoc}{\\setcounter{tocdepth}{0}\\renewcommand{\\contentsname}{Overview}\\tableofcontents}
                   \\newcommand{\\longtoc}{\\setcounter{tocdepth}{2}\\renewcommand{\\contentsname}{Detailed
                   Overview}\\tableofcontents}
                   \\aliaspagestyle{chapter}{empty}
                   \\renewcommand{\\partnumberlinebox}[2]{#2 }
                   \\renewcommand{\\chapternumberlinebox}[2]{#2 }
                   \\usepackage{svg}
                   \\usepackage{inconsolata}
                   \\usepackage[ruled,vlined,linesnumbered, algochapter]{algorithm2e}
                   \\def\\algorithmautorefname{Algorithm}
                   \\def\\listingautorefname{Listing}
                   \\usepackage[style=alphabetic]{biblatex}

                   "
                            ("\\chapter{%s}" . "\\chapter*{%s}")
                            ("\\section{%s}" . "\\section*{%s}")
                            ("\\subsection{%s}" . "\\subsection*{%s}")
                            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                            ("\\paragraph{%s}" . "\\paragraph*{%s}")
                            ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
      ;; Report
      (add-to-list 'org-latex-classes
                   '("report"                          ;class-name
                     "\\documentclass[10pt]{article}
            \\RequirePackage[utf8]{inputenc}
            \\RequirePackage[T1]{fontenc}
            \\RequirePackage{setspace}              %%pour le titre
            \\RequirePackage{graphicx}          %% gestion des images
            \\RequirePackage[dvipsnames,table]{xcolor}	%% gestion des couleurs
            \\RequirePackage{array}		%% gestion améliorée des tableaux
            \\RequirePackage{calc}              %% syntaxe naturelle pour les calculs
            \\RequirePackage{enumitem}          %% pour les listes numérotées
            \\RequirePackage[footnote]{snotez}	%% placer les notes de pied de page sur le coté
            \\RequirePackage{microtype,textcase}
            \\RequirePackage{titlesec}
            \\RequirePackage{booktabs}
            \\RequirePackage{amsmath,
                    amssymb,
                    amsthm}             %% For including math equations, theorems, symbols, etc
            \\RequirePackage[toc]{multitoc}
            \\RequirePackage[a4paper,left=15mm,
            top=15mm,headsep=2\\baselineskip,
            textwidth=132mm,marginparsep=8mm,
            marginparwidth=40mm,textheight=58\\baselineskip,
            headheight=\\baselineskip]{geometry}
            \\microtypesetup{protrusion=true,final}
            %%----------------------------------------------------------------------------------------
            %%	HEADERS
            %%----------------------------------------------------------------------------------------
            \\makeatletter
            \\newenvironment{fullpage}
                {\\noindent\\begin{minipage}
                {\\textwidth+\\marginparwidth+\\marginparsep}\\smallskip}
                {\\end{minipage}
            %%\\vspace{2mm}
            }
            %% COLOR %<--------------------------------------------------------->%
            \\RequirePackage{xcolor}
            %% Contrast colours
            \\definecolor{mdgreen}{HTML}{A4C21F}
            %% Additional colours
            \\definecolor{mdgrey}{HTML}{A19589}
            \\colorlet{mdgray}{mdgrey}
            \\definecolor{mdlightgrey}{HTML}{D8D0C7}
            \\colorlet{mdlightgray}{mdlightgrey}
            %% DOC %<----------------------------------------------------------->%
            \\ProcessOptions\\relax
            %% Command to provide alternative translations
            \\newcommand{\\UseLanguage}[3]{
               \\iflanguage{french}{#1}{}
               \\iflanguage{english}{#2}{}
               \\iflanguage{german}{#3}{}
            }
            %% This} separating line is used across several documents,
            \\newcommand{\\@separator}{%%
             %% To make sure we have spacing on both sides, make an invisible rule, 2X tall
              \\rule{0ex}{2ex}%%
               %% Place the dashed rule 1X high
              \\textcolor{mdgray}{\\rule[1ex]{\\textwidth}{0.25pt}}%%
            }
            %% LABEL %<-------------------------------------------------------->%
            %% Standard style for labels, small and bold
            \\newcommand{\\@labeltext}{\\large\\scshape}
            \\newcommand*{\\@approvedlabel}{\\UseLanguage{APPROUVE PAR}{APPROVED BY}{FREIGEGEBEN VON}}
            \\newcommand*{\\@approved}{Set with \\texttt{\textbackslash approved\\{\\}}}
            \\newcommand*{\\approved}{\\renewcommand*{\\@approved}}
            \\newcommand*{\\@authorlabel}{\\UseLanguage{Auteur(s)}{Author(s)}{Author(en)}}
            \\newcommand*{\\@Authorlabel}{\\UseLanguage{AUTEUR(S)}{AUTHOR(S)}{AUTHOR(EN)}}
            \\newcommand*{\\@checkedlabel}{\\UseLanguage{VERIFIE PAR}{CHECKED BY}{VERIFIZIERT DURCH}}
            \\newcommand*{\\@checked}{Set with \\texttt{\textbackslash checked\\{\\}}}
            \\newcommand*{\\checked}{\\renewcommand*{\\@checked}}
            \\newcommand*{\\@datelabel}{\\UseLanguage{DATE}{DATE}{DATUM}}
            \\newcommand*{\\@absentlabel}{\\UseLanguage{ABSENT}{ABSENT}{ABWESEND}}
            \\newcommand*{\\@excusedlabel}{\\UseLanguage{EXCUSE}{EXCUSED}{ENTSCHULDIGT}}
            \\newcommand*{\\@durationlabel}{\\UseLanguage{DUREE}{DURATION}{DAUER}}
            \\newcommand*{\\@duration}{Set with \\texttt{\\textbackslash duration\\{\\}}}
            \\newcommand*{\\duration}{\\renewcommand*{\\@duration}}
            \\newcommand*{\\@initiatorlabel}{\\UseLanguage{INITIATEUR}{INITIATED BY}{INITIATOR}}
            \\newcommand*{\\@initiator}{Set with \\texttt{\\textbackslash initiator\\{\\}}}
            \\newcommand*{\\initiator}{\\renewcommand*{\\@initiator}}
            \\newcommand*{\\@participantlabel}{\\UseLanguage{PARTICIPANT}{PARTICIPANT}{TEILNEHMER}}
            \\newcommand*{\\@participantslabel}{\\UseLanguage{PARTICIPANTS}{PARTICIPANTS}{TEILNEHMER}}
            \\newcommand*{\\@preparedlabel}{\\UseLanguage{PREPARE PAR}{PREPARED BY}{VORBEREITET VON}}
            \\newcommand*{\\@prepared}{Set with \\texttt{\\textbackslash prepared\\{\\}}}
            \\newcommand*{\\prepared}{\\renewcommand*{\\@prepared}}
            \\newcommand*{\\@presentlabel}{\\UseLanguage{PRESENT}{PRESENT}{ANWESEND}}
            \\newcommand*{\\@projectlabel}{\\UseLanguage{PROJET}{PROJECT}{PROJEKT}}
            \\newcommand*{\\@project}{Set with \\texttt{\\textbackslash project\\{\\}}}
            \\newcommand*{\\project}{\\renewcommand*{\\@project}}
            \\newcommand*{\\@referencelabel}{\\UseLanguage{REFERENCE}{REFERENCE}{REFERENCE}}
            \\newcommand*{\\@reportlabel}{\\UseLanguage{Rapport}{Report}{Bericht}}
            \\newcommand*{\\@reportnumberlabel}{\\UseLanguage{RAPPORT N°}{REPORT NUMBER}{BERICHT NUMMER}}
            \\newcommand*{\\@reportnumber}{Set with \\texttt{\\textbackslash reportnumber\\{\\}}}
            \\newcommand*{\\reportnumber}{\\renewcommand*{\\@reportnumber}}
            \\newcommand*{\\@wheremeeting}{Set with \\texttt{\\textbackslash wheremeeting\\{\\}}}
            \\newcommand*{\\wheremeeting}{\\renewcommand*{\\@wheremeeting}}
            \\newcommand*{\\@whenmeeting}{Set with \\texttt{\\textbackslash whenmeeting\\{\\}}}
            \\newcommand*{\\whenmeeting}{\\renewcommand*{\\@whenmeeting}}
            %% TASKS
            \\newcommand*{\\@tasklistlabel}{\\UseLanguage{Liste de tâches}{Task List}{Aufgaben}}
            \\newcommand*{\\@tasknumberlabel}{\\#}
            \\newcommand*{\\@tasklabel}{\\UseLanguage{TACHE}{TASK}{Aufgabe}}
            \\newcommand*{\\@duelabel}{\\UseLanguage{DATE D'ECHEANCE}{DUE DATE}{ERLEDIGUNGSDATUM}}
            \\newcommand*{\\@responsiblelabel}{\\UseLanguage{RESPONSABLE}{RESPONSIBLE}{VERANTWORTLICH}}
            %% MINUTES %<------------------------------------------------------->%
            \\ProcessOptions\\relax
            \\PassOptionsToPackage{table}{xcolor}
            \\renewcommand*{\\@authorlabel}{\\UseLanguage{ECRIT PAR}{WRITTEN BY}{GESCHRIEBEN VON}}
            %% Setting up header and footer
            \\RequirePackage{fancyhdr,lastpage}
            \\pagestyle{fancy}
            %% Header
            \\renewcommand{\\headrulewidth}{0pt}
            %% Footer
            \\renewcommand{\\footrulewidth}{0pt}
            \\fancyfoot[c]{%%
              \\sffamily%%
              \\color{mdgray}
              \\@separator\\newline
              ~~%%
              \\begin{minipage}[c]{0.5\\textwidth}
                \\hspace*{3pt}\\small{\\textbf{\\@projectlabel}}\\newline
                \\hspace*{\\tabcolsep}\\@project
              \\end{minipage}%%
              \\hfill
              \\thepage\\ \\UseLanguage{de}{of}{von} \\pageref{LastPage}
              ~~\\newline
              \\@separator
            }
            %% The logo box.
            \\newcommand{\\@rlogo}{
              \\noindent
              \\scriptsize
              \\raggedleft
              \\setlength{\\parskip}{1ex}
              \\includegraphics[height=70px,width=70px,keepaspectratio]{\\@mainlogo}
            %%\\includegraphics[width=\\textwidth]{\\@mainlogo}
            }
            \\RequirePackage{xparse}
            \\newcommand{\\@participantstable}{}
            \\NewDocumentCommand \\participant { O{present} m }{
                \\g@addto@macro \\@participantstable {
                    \\multicolumn{2}{l}{#2}
                      & \\ifstrequal{#1}{present}    {$\\bullet$}{}
                      & \\ifstrequal{#1}{absent}     {$\\bullet$}{}
                      & \\ifstrequal{#1}{excused}    {$\\bullet$}{}\\\\
                }
            }
            \\RequirePackage{tabularx,ltxtable}
            \\newcommand{\\@tasktable}{}
            \\newcommand{\\tasklist}{%%
              \\section*{\\@tasklistlabel}
              \\vspace{-\\baselineskip}
              \\begin{longtable}{rp{0.55\\textwidth}p{0.2\\textwidth}l}
                \\multicolumn{4}{@{}c@{}}{\\@separator}\\\\*
                \\@labeltext \\@tasknumberlabel & \\@labeltext \\@tasklabel &
                \\@labeltext \\@responsiblelabel & \\@labeltext \\@duelabel\\\\*
                \\multicolumn{4}{@{}c@{}}{\\@separator}
                \\@tasktable\\\\*
              \\end{longtable}
            }
            \\newcounter{sinteftask}
            \\newcommand{\\task}[3]{%%
                \\g@addto@macro \\@tasktable {%%
                  \\\\
                  \\refstepcounter{sinteftask}\\thesinteftask & #1 & #2 & #3 \\\\*
                  \\multicolumn{4}{@{}c@{}}{\\@separator}%%
                }%%
            }
            %% Recipient address and information colophon
            \\RequirePackage{colortbl,tabularx,setspace,rotating}
            \\newcommand{\\frontmatter}{%%
              \\sffamily%%
              \\noindent%%
              \\begin{minipage}[b]{0.7\\textwidth}
                \\setlength{\\parskip}{2ex}%%
                \\huge\\textbf\\@title
                %% ~ ensures \\ does not crash when \@wheremeeting is empty
                \\Large \\@wheremeeting~\\\\\\@whenmeeting
              \\end{minipage}
              \\hfill
              \\begin{minipage}[b]{0.20\\textwidth}
                %% Bring the colophon and address back up a bit
                \\vspace*{-25pt}
               \\@rlogo
              \\end{minipage}
              \\vspace{1ex}%%
              \\noindent%%
              \\@separator\\\\
              \\rowcolors{4}{}{mdlightgray}
              \\begin{tabularx}{\\textwidth}{XXccc}
                \\rowcolor{white}
                  \\parbox{\\linewidth}{{\\@labeltext \\@initiatorlabel}\\\\\\@initiator}
                  & \\parbox{\\linewidth}{{\\@labeltext \\@authorlabel}\\\\\\@author}
                  & \\raisebox{-1cm}{\\begin{sideways}\\parbox{2cm}{\\raggedright\\@labeltext\\@presentlabel}\\end{sideways}}
                  & \\raisebox{-1cm}{\\begin{sideways}\\parbox{2cm}{\\raggedright\\@labeltext\\@absentlabel}\\end{sideways}}
                  & \\raisebox{-1cm}{\\begin{sideways}\\parbox{2cm}{\\raggedright\\@labeltext\\@excusedlabel}\\end{sideways}}\\\\
                \\rowcolor{white} \\multicolumn{5}{@{}c@{}}{\\@separator}\\\\
                \\rowcolor{white} \\@labeltext \\@participantslabel\\\\
                \\@participantstable
              \\end{tabularx}
              \\rowcolors{1}{}{} %% Back to normal
              \\@separator\\\\
              \\begin{minipage}{0.40\\textwidth}
                \\hspace*{3pt}{\\@labeltext\\@projectlabel}\\\\
                \\hspace*{\\tabcolsep}\\@project
              \\end{minipage}
              \\hfill
              \\begin{minipage}{0.3\\textwidth}
                {\\@labeltext \\@datelabel}\\\\
                \\@date
              \\end{minipage}
              \\begin{minipage}{0.2\\textwidth}
                {\\@labeltext \\@durationlabel}\\\\
                \\@duration
              \\end{minipage}\\\\
              \\@separator
              \\noindent
            }
            \\makeatother
            " ;;import de la feuille de syle dans texmf
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

      ;; Custom Titlepage
      (setq org-latex-title-command (concat
                                     "\\thispagestyle{empty}\n"
                                     "{\\centering\n"
                                     "{\\Huge %t \\par }\n"
                                     "\\vspace{10pt}\n"
                                     "{\\normalsize\\itshape %s \\par}\n"
                                     "{\\normalsize\\scshape %a \\par}\n"
                                     "\\vfill\n"
                                     "{\\normalsize %D \\par}\n"
                                     "\\clearpage\n"
                                     "}"))
#+END_SRC

*** Presentations
    #+BEGIN_SRC emacs-lisp
      (use-package org-re-reveal
        :config
        (setq org-re-reveal-external-plugins '((chart . "{src: './reveal.js/plugin/chart/Chart.min.js', async:true,
         condition: function() { return !!document.body.classList; } }")
                                               (csv2chart . "{src: './reveal.js/plugin/chart/csv2chart.js', async:true,
         condition: function() { return !!document.body.classList; } }"))))
    #+END_SRC
** Mailing & RSS
*** Reading Email
#+begin_src emacs-lisp
  ;;load el files for notmuch from net-mail/notmuch
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/notmuch")
  (use-package notmuch
    :ensure nil
    :bind ([f2] . notmuch)
    :config
    (setq notmuch-search-oldest-first nil
          notmuch-draft-folder "Drafts"
          notmuch-draft-tags '("+draft" "-inbox")
          notmuch-show-logo nil
          notmuch-column-control 1.0
          notmuch-hello-auto-refresh t
          notmuch-hello-recent-searches-max 20
          notmuch-hello-thousands-separator ""
          notmuch-hello-sections '(notmuch-hello-insert-saved-searches)
          notmuch-show-all-tags-list t
          notmuch-show-relative-dates t
          notmuch-message-headers '("To" "Cc" "Subject" "Date")
          notmuch-saved-searches
          `(( :name "📥 inbox"
              :query "tag:inbox"
              :sort-order newest-first
              :key ,(kbd "i"))
            ( :name "💬 unread (inbox)"
              :query "tag:unread and tag:inbox"
              :sort-order newest-first
              :key ,(kbd "u")))))
  ;;Indicator
  (use-package notmuch-indicator
    :config
    (setq notmuch-indicator-args
          '((:terms "tag:unread and tag:inbox" :label "📬"))))
#+end_src
*** Sending Email
#+begin_src emacs-lisp
  (setq send-mail-function 'sendmail-send-it
        sendmail-program "/usr/bin/msmtp"
        mail-specify-envelope-from t
        message-sendmail-envelope-from 'header
        mail-envelope-from 'header)
#+end_src
** Blogging
*** Ox-Publish
    #+BEGIN_SRC emacs-lisp
      (require 'ox-publish)
      (setq org-publish-project-alist
            '(( "me"
                :base-directory "~/Org/website/content"
                :base-extension "org"
                :recursive nil
                :publishing-directory  "~/Org/website/html"
                :publishing-function org-html-publish-to-html
                :html-doctype "html5"
                :html-html5-fancy t
                :html-head-include-scripts nil
                :html-head-include-default-style nil
                :html-head
                "<link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">
      <link rel=\"preconnect\" href=\"/\">
                <link rel=\"stylesheet\" href=\"/inter/inter.css\">"
                :html-preamble "<nav><h2>schimper.me</h2>
      <ul>
      <li>
      <a href=\"/\">Me</a>
      </li>
      <li>
      <a href=\"/blog\">Blog</a>
      </li>
      </ul>
      </nav>"
                :html-postamble "<div class=\"generator-information\">
            <p>Powered by %c</p>
            </div>"
                :with-author t
                :with-toc nil
                :with-title nil
                :section-numbers nil
                :html-head-include-scripts nil
                :html-head-include-default-style nil
                :time-stamp-file nil)
              ("blog"
               :base-directory "~/Org/website/content/blog"
               :base-extension "org"
               :publishing-directory "~/Org/website/html/blog/"
               :publishing-function org-html-publish-to-html
               :auto-sitemap t
               :sitemap-title "Blog Posts"
               :sitemap-filename "index.org"
               :sitemap-sort-files anti-chronologically)
              ("static"
               :base-directory "~/Org/website/static"
               :base-extension "css\\|txt\\|jpg\\|gif\\|png\\|woff\\|woff2"
               :recursive t
               :publishing-directory "~/Org/website/html"
               :publishing-function org-publish-attachment)
              ("website" :components ("me" "static" "blog")))
            org-html-validation-link nil)
    #+END_SRC
** Printing
*** Postscript

    #+begin_src emacs-lisp
  (require 'ps-print)
  (setq ps-font-info-database
        (append
         '((Iosevka
            (fonts (normal      . "Iosevka")
                   (bold        . "Iosevka-Bold")
                   (italic      . "Iosevka-Italic")
                   (bold-italic . "Iosevka-Bold-Italic"))
            (size           . 11.0)
            (line-height    . 13.0)
            (space-width    . 6.04688)
            (avg-char-width . 6.04688)))
         ps-font-info-database)
        ps-font-family 'Iosevka
        ps-font-size 11)

  ;; Print in color
  (setq-default ps-print-color-p nil)

  ;; Header
  (setq ps-header-lines 1
        ps-header-font-size 11
        ps-header-title-font-size 11
        ps-header-font-family 'Iosevka
        ps-right-header '(ps-time-stamp-yyyy-mm-dd)
        ps-print-header-frame t)

  ;; Footer
  (setq ps-footer-lines 1
        ps-footer-font-size 11
        ps-footer-font-family 'Iosevka
        ps-print-footer t
        ps-left-footer nil
        ps-right-footer (list "/pagenumberstring load")
        ps-footer-offset .50
        ps-footer-line-pad .50
        ps-print-footer-frame t)
  ;; Keystroke to print
  (global-set-key (kbd "<print>")  'ps-print-buffer-with-faces)
    #+end_src
** Web
*** IRC
**** RCIRC
#+begin_src emacs-lisp
  (setq rcirc-server-alist '(("irc.libera.chat" :port 6697 :encryption tls :channels ("#gentoo" "#gentoo-de"))))
  (setq rcirc-default-nick "oxlod")
#+end_src
*** Browsing
#+begin_src emacs-lisp
  (use-package shr-tag-pre-highlight
    :init
    (defun shrface-shr-tag-pre-highlight (pre)
      "Highlighting code in PRE."
      (let* ((shr-folding-mode 'none)
             (shr-current-font 'default)
             (code (with-temp-buffer
                     (shr-generic pre)
                     (buffer-string)))
             (lang (or (shr-tag-pre-highlight-guess-language-attr pre)
                       (let ((sym (language-detection-string code)))
                         (and sym (symbol-name sym)))))
             (mode (and lang
                        (shr-tag-pre-highlight--get-lang-mode lang))))
        (shr-ensure-newline)
        (shr-ensure-newline)
        (setq start (point))
        (insert
         (propertize (concat "#+BEGIN_SRC " lang "\n") 'face 'org-block-begin-line)
         (or (and (fboundp mode)
                  (with-demoted-errors "Error while fontifying: %S"
                    (shr-tag-pre-highlight-fontify code mode)))
             code)
         (propertize "#+END_SRC" 'face 'org-block-end-line ))
        (shr-ensure-newline)
        (setq end (point))
        (add-face-text-property start end '(:background "#1f2329" :extend t))
        (shr-ensure-newline)
        (insert "\n")))
    :config
    (add-to-list 'shr-external-rendering-functions
                 '(pre . shrface-shr-tag-pre-highlight)))

  (use-package shrface
    :config
    (shrface-basic)
    (shrface-trial)
    (shrface-default-keybindings)
    (setq shrface-href-versatile t))

  (use-package eww
    :ensure nil
    :hook
    ((eww-after-render . shrface-mode))
    :config
    (require 'shrface))
#+end_src
